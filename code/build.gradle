// Common for all projects
allprojects {
	apply plugin: 'maven-publish'
	apply plugin: 'groovy'
	apply plugin: 'kotlin'
	apply plugin: 'kotlin-spring'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'jacoco'
	apply plugin: 'idea'
	apply plugin: 'com.adarshr.test-logger'

	sourceCompatibility = 17
	targetCompatibility = 17

	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven {	url "https://plugins.gradle.org/m2/" }
	}

	ext {
		kotlinVersion = '1.8.0'
		groovyVersion = '3.0.13'
		groovySpockVersion = '2.4-M1-groovy-3.0'
		springBootVersion = '3.0.2'
		springCloudVersion = '2022.0.4'
		springVersion = '6.0.0'
		springDocVersion = '1.5.12'
		myBatisVersion = '3.4.5'
		validationApiVersion = '2.0.1.Final'
		jakartaValidationApiVersion = '3.0.0'
		junitVersion = '4.13.1'
		sl4jVersion = '1.7.25'
		injectVersion = '1'
		testLoggerVersion = '1.6.0'
		hamcrestCoreVersion = '2.2'
		bytebuddyVersion = '1.12.20'
		objenesisVersion = '3.3'
		reflectionVersion = '0.10.2'
		guavaVersion = '32.1.2-jre'
	}

	dependencies {
		// Prod
		implementation("com.google.guava:guava:${guavaVersion}")
		implementation("javax.inject:javax.inject:${injectVersion}")
		implementation("org.springdoc:springdoc-openapi-ui:${springDocVersion}")
		implementation("org.springdoc:springdoc-openapi-data-rest:${springDocVersion}")
		implementation("org.springdoc:springdoc-openapi-kotlin:${springDocVersion}")
		implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
		implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
		implementation("jakarta.validation:jakarta.validation-api:${jakartaValidationApiVersion}")
		implementation("org.slf4j:slf4j-simple:${sl4jVersion}")
		implementation("org.mybatis:mybatis:${myBatisVersion}")
		implementation("org.reflections:reflections:${reflectionVersion}")
		compileOnly("org.springframework.boot:spring-boot-starter-rsocket")
		compileOnly("org.springframework.boot:spring-boot-starter-jdbc:${springBootVersion}")
		compileOnly("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")

		// Test
		testImplementation("junit:junit:${junitVersion}")
		testImplementation("org.codehaus.groovy:groovy:${groovyVersion}")
		testImplementation("org.spockframework:spock-core:${groovySpockVersion}")
		// optional dependencies for using Spock
		testImplementation("org.hamcrest:hamcrest-core:${hamcrestCoreVersion}") // only necessary if Hamcrest matchers are used
		testRuntimeOnly("net.bytebuddy:byte-buddy:${bytebuddyVersion}")    		// allows mocking of classes (in addition to interfaces)
		testRuntimeOnly("org.objenesis:objenesis:${objenesisVersion}")			// allows mocking of classes without default constructor (together with CGLIB)
	}

	test {
		useJUnitPlatform()

		testLogging {
			events "passed", "skipped", "failed"
		}
	}


	task view_paths {
		doLast { task ->
			println "$task.project.name"
			println "------------------"
			println "Main: $sourceSets.main.java.srcDirTrees"
			println "   Resources: $sourceSets.main.resources.srcDirTrees"
			println "Tests: $sourceSets.test.java.srcDirTrees"
			println "   Resources: $sourceSets.test.resources.srcDirTrees"
		}
	}
}

// All subprojects (located in src/*)
subprojects {
	group = "com.makobrothers.${rootProject.name}"

	sourceSets {
		main {
			kotlin { srcDirs = ['main/kotlin','main/customized/kotlin','main/generated/kotlin'] }
			resources { srcDirs = ['main/resources'] }
		}

		test {
			kotlin { srcDirs = ['test/groovy'] }
			resources { srcDirs = ['test/resources'] }
		}
	}

	dependencies {
		implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
		testImplementation rootProject.sourceSets.main.output
		implementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")

		if (project.name != "shared") {
			implementation project(":shared")
			testImplementation project(":shared").sourceSets.test.output
		}
	}

	bootJar {
		enabled = false
	}

	jar {
		enabled = true
	}
}

// Main project (located in apps/)
buildscript {
	ext {
		kotlinVersion = '1.8.0'
		testLoggerVersion = '1.6.0'
		springBootGradleVersion = '3.1.2'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven {	url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath("com.adarshr.test-logger:com.adarshr.test-logger.gradle.plugin:${testLoggerVersion}")
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootGradleVersion}")
	}
}

sourceSets {
	main {
		kotlin { srcDirs = ['apps/main/kotlin','apps/main/customized/kotlin','apps/main/generated/kotlin'] }
		resources { srcDirs = ['apps/main/kotlin/resources'] }
	}

	test {
		groovy { srcDirs = ['apps/test/groovy'] }
		resources { srcDirs = ['apps/test/groovy/resources'] }
	}
}

bootJar {
	//baseName = 'mako-ddd'
	version = '0.0.1'
}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
	implementation project(":shared")
	implementation project(":rrhh")

	testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
	testImplementation project(":shared").sourceSets.test.output
}

