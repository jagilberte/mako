// Common for all projects
allprojects {
	apply plugin: 'maven-publish'
	apply plugin: 'groovy'
	apply plugin: 'kotlin'
	apply plugin: 'kotlin-spring'
	apply plugin: 'jacoco'
	apply plugin: 'idea'
	apply plugin: 'com.adarshr.test-logger'

	sourceCompatibility = 17
	targetCompatibility = 17

	repositories {
		mavenCentral()
		maven { url 'https://repo.spring.io/milestone' }
	}

	ext {
		kotlinVersion = '1.8.0'
		groovyVersion = '3.0.13'
		groovySpockVersion = '2.4-M1-groovy-3.0'
		springBootVersion = '3.0.2'
		springVersion = '6.0.0'
		validationApiVersion = '2.0.1.Final'
		sl4jVersion = '1.7.25'
		injectVersion = '1'
		testLoggerVersion = '1.6.0'
		hamcrestCoreVersion = '2.2'
		bytebuddyVersion = '1.12.20'
		objenesisVersion = '3.3'
	}

	dependencies {
		// Prod
		implementation("javax.inject:javax.inject:${injectVersion}")
		implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
		implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
		implementation("jakarta.validation:jakarta.validation-api:${jakartaValidationApiVersion}")
		implementation("org.slf4j:slf4j-simple:${sl4jVersion}")
		implementation("com.makobrothers.cleanarchitecture:commons-domain:${version}")
		implementation("com.makobrothers.mako:mako-rrhh-domain:${version}")
		compileOnly("org.springframework.boot:spring-boot-starter-jdbc:${springBootVersion}")
		compileOnly("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")

		// Test
		testImplementation("junit:junit:${junitVersion}")
		testImplementation("org.codehaus.groovy:groovy:${groovyVersion}")
		testImplementation("org.spockframework:spock-core:${groovySpockVersion}")
		// optional dependencies for using Spock
		testImplementation("org.hamcrest:hamcrest-core:${hamcrestCoreVersion}") // only necessary if Hamcrest matchers are used
		testRuntimeOnly("net.bytebuddy:byte-buddy:${bytebuddyVersion}")    		// allows mocking of classes (in addition to interfaces)
		testRuntimeOnly("org.objenesis:objenesis:${objenesisVersion}")			// allows mocking of classes without default constructor (together with CGLIB)
	}

	dependencyManagement {
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		}
	}

	test {
		useJUnitPlatform()

		testLogging {
			events "passed", "skipped", "failed"
		}
	}


	task view_paths {
		doLast { task ->
			println "$task.project.name"
			println "------------------"
			println "Main: $sourceSets.main.java.srcDirTrees"
			println "   Resources: $sourceSets.main.resources.srcDirTrees"
			println "Tests: $sourceSets.test.java.srcDirTrees"
			println "   Resources: $sourceSets.test.resources.srcDirTrees"
		}
	}
}

// All subprojects (located in src/*)
subprojects {
	group = "com.makobrothers.mako.${rootProject.name}"

	sourceSets {
		main {
			kotlin { srcDirs = ['main'] }
			resources { srcDirs = ['main/resources'] }
		}

		test {
			kotlin { srcDirs = ['test'] }
			resources { srcDirs = ['test/resources'] }
		}
	}

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-web:2.1.8.RELEASE'

		testImplementation rootProject.sourceSets.main.output
		testImplementation 'org.springframework.boot:spring-boot-starter-test:2.2.1.RELEASE'

		if (project.name != "shared") {
			implementation project(":shared")
			testImplementation project(":shared").sourceSets.test.output
		}
	}

	bootJar {
		enabled = false
	}

	jar {
		enabled = true
	}
}

// Main project (located in apps/)
buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath('org.springframework.boot:spring-boot-gradle-plugin:2.2.1.RELEASE')
	}
}

sourceSets {
	main {
		java { srcDirs = ['apps/main'] }
		resources { srcDirs = ['apps/main/resources'] }
	}

	test {
		java { srcDirs = ['apps/test'] }
		resources { srcDirs = ['apps/test/resources'] }
	}
}

bootJar {
	baseName = 'mako-ddd'
	version = '0.0.1'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web:2.1.8.RELEASE'

	implementation project(":shared")
	implementation project(":rrhh")

	testImplementation 'org.springframework.boot:spring-boot-starter-test:2.1.8.RELEASE'
	testImplementation project(":shared").sourceSets.test.output
}

